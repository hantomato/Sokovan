폴더에서 지우면 안되는 필수 폴더는
	Assets
	Packages
	ProjectSettings

컴포넌트는 독립 부품
게임 오브젝트-컴포넌트 (상속과 대비됨)
 - 패턴명 : 컴포넌트 패턴, 컴포지션 패턴
 - 장점 : 재사용, 기능 추가,삭제 용이
 
유니티 이벤트 메서드 (유니티 이벤트 함수) 
 - start, update, onTriggerEnter
 
 
Shader : 빛에 의해서 어떻게 물체의 표면이 보일까
Textuer : 그림 파일
Colllider (콜라이더) : 투과되지 못하게 하는 것. 이것 없으면 물체가 통과됨

// * unity 용어 정리 : http://w3devlabs.net/wp/?p=9831
 
 
addForce(x : 옆(오른쪽), y : 위, g : 앞뒤)
axes 인풋 설정 (Project Settings > Input)

오브젝트 이동시에 Ctrl+이동 하면 한칸 단위로 이동
Ctrl + d : 객체 복사
Prefab 미리 민들어진 파일로 존재하는 게임 오브젝트 - 파란색으로 표시
drag : 마찰력
기본 기능
	transform
	Time.deltaTime (한 프레임의 시간) (30프레임이라면 1/30 을 의미. 30번 더하면 1이 되는 값)
	OnTriggerEnter(Collider other) : 트리거인 콜라이더와 충돌할때 발생
	OnTriggerExit, OnTriggerStay
	OnCollisionEnter(Collision other) : 일반 콜라이더와 충돌했을때
Canvas Text Anchor Presets (alt 키 눌러야..)
UnityEngine.SceneManagement

// 34 /////////////////////////
벡터는 방향과 길이(크기, 속도)를 의미
벡터의 크기 : 영어로 Magnitude (속도나 거리를 의미)
ex) vector2(-4, 3) = 루트( (-4)제곱 + (3)제목) = 루트 25 = 5
간격 = 목적지 - 현재위치 : 현재위치에서 얼만큼 가야 목적지에 도착하냐 - [중요!!!]
= 도착지 - 시작지 
player가 enemy에 가고 싶으면 enemy - player 하면 된다.
* 벡터는 방향과 속도를 나타냄
길이가 1인 벡터!!! = 방향 벡터 = normalized ventoer (길이 1 벡터)

(-4, 3) 벡터는 (-0.8, 0.6) X 5 이고 (-0.8 0.6) 의 길이는 1임

// 35 /////////////////////////
transform.Translate 평행이동 (로컬좌표계 기준으로 이동)
transform.Translate(x, space.world) 글로벌 좌표계 기준으로 이동)
transform.position 은 글로벌 좌표계이다.
transform.localPosition = 로컬 좌표계이다.
transform.rotation, localRotation
transform.lossyScale, localScale (lossy : 외곡되지 않았다는 의미. 글로벌)

// 36 //////
쿼터니언(quaternion)
Quaternion.Euler(오일로)
짐벌락 (gimbal lock) 현상 : 회전 후에 축 하나가 날라간 현상??? [중요!!!]
쿼터니언 (x,y,z,w)
Quaternion targetRotation = Quaternion.LookRotation(new Vector3(0,1,0)); // 위쪽을 바라보는 rotation 생성됨
Quaternion.Lerp(a,b, 0.5f) : 두 rotation의 중간값 구하기
	// A     |      B
	// 0     0.5    1
	
Quaternion.eularAngles 쿼터니언을 벡터로 반환

* Quaternion 은 수행의 행렬이며, 두 Quaternion 을 더할려면 곱셈을 해야함 ??? (행렬이 원래 그렇다고 함)
* 가장 간단한 2번의 회전은 백터로 구해서 백터값을 더하는 방법임
* [중요!!] Ctrl + 회전 : 한번에 15도씩 회전됨

// 39 /////
Awake, Start 비교 : 둘다 게임 시작시에 한번씩 호출되지만, Awake가 한박자 먼저 호출됨
(월드에 게임오브젝트가 3개가 있다면, 3개의 Awake 호출후 3개의 Start 호출됨)

// 42 코루틴 //
코루틴, 앵커, startCoroutine(함수 또는 함수명), IEnumerator, yield, WaitForSeconds, StopCoroutine(이름)
함수명 (이름)을 사용시에는 나중에 코루틴을 수동 중지하는게 가능하다.
코루틴의 큰 특징 1. 대기시간을 가진다. 2. 비동기이다. WaitForSeconds 없으면, 한 프레임만 쉰다.

// 46 //
ParticleSystem


// 48
Physics : 유니티가 제공하는 물리관련 함수 집함
Physics.OverlapSphere // 구의 중심과 반지름을 지정해주면 거기에 포함되는 모든 콜라이더들을 배열로 구해준다. layerMast 지정시에 해당되는 레이어의 콜라이더만 구한다.
Mathf.Max(a,b) 두 수중에 큰 값 구하기
Rigidbody.AddExplosionForce(폭발물 힘, 폭발물 위치, 폭발 반경) 내가 알아서 팅겨나가도록 해줌

// 49
Canvas-Slider
Canvas.Render Mode : World Space
Canvas.Scaler.Reference Pixels Per Unit : 직접도, 픽셀수 올라가서 화질 좋아짐
OnEnable 컴퍼넌드가 active 일때 계속 호출됨. => 정정. 한번 호출되는거 같음.













